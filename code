import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from textblob import TextBlob
[24]
 # Load the dataset
reviews_df = pd.read_csv('Training_Data_Google_Play_reviews_6000.csv')

# Inspect the data
print(reviews_df.info())
print(reviews_df.head())

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 6000 entries, 0 to 5999
Data columns (total 13 columns):
 #   Column                Non-Null Count  Dtype 
---  ------                --------------  ----- 
 0   reviewId              6000 non-null   object
 1   userName              6000 non-null   object
 2   userImage             6000 non-null   object
 3   content               6000 non-null   object
 4   score                 6000 non-null   int64 
 5   thumbsUpCount         6000 non-null   int64 
 6   reviewCreatedVersion  4396 non-null   object
 7   at                    6000 non-null   object
 8   replyContent          191 non-null    object
 9   repliedAt             191 non-null    object
 10  appVersion            4396 non-null   object
 11  userLang              6000 non-null   object
 12  app_id                6000 non-null   object
dtypes: int64(2), object(11)
memory usage: 609.5+ KB
None
                               reviewId           userName  \
0  495266a4-f451-48c3-a844-fb3c07560d55     Foysal Hossain   
1  947fcd83-7a28-403d-b03b-d0bc20f52e0e          S K VERMA   
2  65856211-67ba-4560-84dd-a0055775ed90      Amanuel Abara   
3  cd5ba250-3a26-43b4-a378-77d18f73a503  Vagarangas X Aopi   
4  e8e886b4-d6c6-416b-b0a1-be90320c4024       Shafin islam   

                                           userImage  \
0  https://play-lh.googleusercontent.com/a-/ALV-U...   
1  https://play-lh.googleusercontent.com/a/ACg8oc...   
2  https://play-lh.googleusercontent.com/a/ACg8oc...   
3  https://play-lh.googleusercontent.com/a/ACg8oc...   
4  https://play-lh.googleusercontent.com/a-/ALV-U...   

                               content  score  thumbsUpCount  \
0  Gett van for no reason ðŸ˜‚ðŸ˜‚ðŸ˜‚      1              0   
1                better' than WhatsApp      4              0   
2             That was good app for me      5              0   
3                         Love the app      5              0   
4                ðŸ•³ï¸ðŸ•³ï¸ðŸ•³ï¸      1              0   

  reviewCreatedVersion               at replyContent repliedAt appVersion  \
0                  NaN  9/19/2023 15:05          NaN       NaN        NaN   
1                  NaN  9/19/2023 14:59          NaN       NaN        NaN   
2                  NaN  9/19/2023 14:55          NaN       NaN        NaN   
3               10.0.4  9/19/2023 14:50          NaN       NaN     10.0.4   
4                  NaN  9/19/2023 14:48          NaN       NaN        NaN   

  userLang                  app_id  
0       EN  org.telegram.messenger  
1       EN  org.telegram.messenger  
2       EN  org.telegram.messenger  
3       EN  org.telegram.messenger  
4       EN  org.telegram.messenger  

[25]
###Step 2: Data Preprocessing

# Drop unnecessary columns
reviews_df = reviews_df[['reviewId', 'content', 'score', 'thumbsUpCount', 'at', 'app_id']]

# Handle missing values
reviews_df.dropna(subset=['content'], inplace=True)

# Remove duplicates
reviews_df.drop_duplicates(inplace=True)
[26]
# Convert data types
# Specify the correct date format
reviews_df['at'] = pd.to_datetime(reviews_df['at'], format='%d-%m-%Y %H:%M', errors='coerce')
reviews_df['score'] = pd.to_numeric(reviews_df['score'], errors='coerce')

# Check the first few rows to verify
print(reviews_df.head())
                               reviewId                              content  \
0  495266a4-f451-48c3-a844-fb3c07560d55  Gett van for no reason ðŸ˜‚ðŸ˜‚ðŸ˜‚   
1  947fcd83-7a28-403d-b03b-d0bc20f52e0e                better' than WhatsApp   
2  65856211-67ba-4560-84dd-a0055775ed90             That was good app for me   
3  cd5ba250-3a26-43b4-a378-77d18f73a503                         Love the app   
4  e8e886b4-d6c6-416b-b0a1-be90320c4024                ðŸ•³ï¸ðŸ•³ï¸ðŸ•³ï¸   

   score  thumbsUpCount  at                  app_id  
0      1              0 NaT  org.telegram.messenger  
1      4              0 NaT  org.telegram.messenger  
2      5              0 NaT  org.telegram.messenger  
3      5              0 NaT  org.telegram.messenger  
4      1              0 NaT  org.telegram.messenger  

[28]
#Exploratory data analysis(EDA)

# Distribution of review scores
plt.figure(figsize=(10, 6))
sns.histplot(reviews_df['score'].dropna(), bins=30, kde=True)
plt.title('Distribution of Review Scores')
plt.xlabel('Score')
plt.ylabel('Frequency')
plt.show()

[29]
# Box plot of review scores by thumbs up count
plt.figure(figsize=(10, 6))
sns.boxplot(x='score', y='thumbsUpCount', data=reviews_df)
plt.title('Box Plot of Review Scores by Thumbs Up Count')
plt.xlabel('Score')
plt.ylabel('Thumbs Up Count')
plt.show()

[30]
##Step 4: Sentiment Analysis
# Function to get sentiment polarity
def get_sentiment(review):
    blob = TextBlob(review)
    return blob.sentiment.polarity
[31]
# Apply the function to the reviews
reviews_df['Sentiment_Polarity'] = reviews_df['content'].apply(get_sentiment)
[39]
#Step 5: Feature Engineering

# Create a new feature for the review sentiment category
reviews_df['Sentiment_Category'] = pd.cut(reviews_df['Sentiment_Polarity'], bins=[-1, -0.5, 0, 0.5, 1], labels=['Very Negative', 'Negative', 'Positive', 'Very Positive'])

[40]
#Step 6: Correlation Analysis
# Calculate correlations
correlation_matrix = reviews_df[['score', 'thumbsUpCount', 'Sentiment_Polarity']].corr()
[41]

# Heatmap of the correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

[42]
# Step 7: Visualization

# Average score by sentiment category
avg_score_by_sentiment = reviews_df.groupby('Sentiment_Category', observed=True)['score'].mean().sort_values()
[43]
plt.figure(figsize=(10, 6))
avg_score_by_sentiment.plot(kind='bar', color='skyblue')
plt.xlabel('Sentiment Category')
plt.ylabel('Average Score')
plt.title('Average Score by Sentiment Category')
plt.show()

[44]
# Distribution of sentiment polarity in reviews
plt.figure(figsize=(10, 6))
sns.histplot(reviews_df['Sentiment_Polarity'], bins=30, kde=True)
plt.title('Distribution of Sentiment Polarity in Reviews')
plt.xlabel('Sentiment Polarity')
plt.ylabel('Frequency')
plt.show()
